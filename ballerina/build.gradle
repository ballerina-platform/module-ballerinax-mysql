/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    repositories {
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/plugin-gradle'
            credentials {
                username System.getenv('packageUser')
                password System.getenv('packagePAT')
            }
        }
    }
    dependencies {
        classpath "io.ballerina:plugin-gradle:${project.ballerinaGradlePluginVersion}"
    }
}

description = 'Ballerina - MySQL Ballerina Generator'

def packageName = 'mysql'
def packageOrg = 'ballerinax'
def tomlVersion = stripBallerinaExtensionVersion("${project.version}")
def ballerinaConfigFile = new File("$project.projectDir/Ballerina.toml")
def ballerinaDependencyFile = new File("$project.projectDir/Dependencies.toml")
def originalConfig = ballerinaConfigFile.text

def stripBallerinaExtensionVersion(String extVersion) {
    if (extVersion.matches(project.ext.timestampedVersionRegex)) {
        def splitVersion = extVersion.split('-')
        if (splitVersion.length > 3) {
            def strippedValues = splitVersion[0..-4]
            return strippedValues.join('-')
        } else {
            return extVersion
        }
    } else {
        return extVersion.replace("${project.ext.snapshotVersion}", '')
    }
}

apply plugin: 'io.ballerina.plugin'

ballerina {
    packageOrganization = packageOrg
    module = packageName
    langVersion = ballerinaLangVersion
}

dependencies {
    externalJars(group: 'io.ballerina.stdlib', name: 'sql-native', version: "${stdlibSqlVersion}") {
        transitive = false
    }
}

task updateTomlFiles {
    doLast {
        def stdlibDependentSqlVersion = stripBallerinaExtensionVersion(project.stdlibSqlVersion)
        def stdlibCryptoVersion = stripBallerinaExtensionVersion(project.stdlibCryptoVersion)

        def newConfig = ballerinaConfigFile.text.replace('@project.version@', project.version.toString())
        newConfig = newConfig.replace('@toml.version@', tomlVersion)
        newConfig = newConfig.replace('@sql.native.version@', project.stdlibSqlVersion)
        newConfig = newConfig.replace('@mysql.driver.version@', project.mySQLDriverVersion)
        newConfig = newConfig.replace('@stdlib.sql.version@', stdlibDependentSqlVersion)

        ballerinaConfigFile.text = newConfig

        def newDependencyConfig = ballerinaDependencyFile.text.replace('@stdlib.sql.version@', stdlibDependentSqlVersion)
        newDependencyConfig = newDependencyConfig.replace('@stdlib.crypto.version@', stdlibCryptoVersion)
        ballerinaDependencyFile.text = newDependencyConfig
    }
}

task revertTomlFiles {
    doLast {
        ballerinaConfigFile.text = originalConfig
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact source: createArtifactZip, extension: 'zip'
        }
    }
    repositories {
        maven {
            name = 'GitHubPackages'
            url = uri("https://maven.pkg.github.com/ballerina-platform/module-${packageOrg}-${packageName}")
            credentials {
                username = System.getenv('publishUser')
                password = System.getenv('publishPAT')
            }
        }
    }
}

def checkExecResult(execResult, failText, standardOutput) {
    if (execResult) {
        if (execResult.getExitValue() != 0) {
            throw new GradleException('Non-zero exit value: ' + execResult.getExitValue())
        }
        if (standardOutput.toString().contains(failText)) {
            throw new GradleException('"' + failText + '" string in output: ' + standardOutput.toString())
        }
    } else {
        throw new GradleException('Returned a null execResult object')
    }
}

task createTestDockerImage(type: Exec) {
    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
        def standardOutput = new ByteArrayOutputStream()
        commandLine 'sh', '-c', "docker build -f $project.projectDir/tests/resources/Dockerfile -t ballerina-mysql" +
                " -q $project.projectDir/tests/resources/"
        doLast {
            checkExecResult(execResult, 'Error', standardOutput)
            sleep(10 * 1000)
        }
    }
}

def checkTestDockerContainerStatus(dockerName) {
    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
        try {
            return exec {
                commandLine 'sh', '-c',
                        "docker exec ${dockerName} mysqladmin ping -hlocalhost -uroot -pTest123# --silent"
            }.exitValue
        } catch (all) {
            return 1
        }
    }
}

task startTestDockerContainer(type: Exec) {
    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
        def standardOutput = new ByteArrayOutputStream()
        commandLine 'sh', '-c', 'docker run --rm -d --name ballerina-mysql -p 3305:3306 -t ballerina-mysql'
        def healthCheck = 1
        def counter = 0
        doLast {
            checkExecResult(execResult, 'Error', standardOutput)
            while (healthCheck != 0 && counter < 12) {
                sleep(5 * 1000)
                healthCheck = checkTestDockerContainerStatus('ballerina-mysql')
                counter = counter + 1
            }
            if (healthCheck != 0) {
                throw new GradleException("Docker container 'ballerina-mysql' health test exceeded timeout!")
            }
        }
    }
}

task startTestSslDockerContainer(type: Exec) {
    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
        def standardOutput = new ByteArrayOutputStream()
        commandLine 'sh', '-c', 'docker run --rm -d --name ballerina-mysql-ssl ' +
                "-v $project.projectDir/tests/resources/mysql-ssl.cnf:/etc/mysql/conf.d/mysql-ssl.cnf " +
                '-p 3307:3306 ' +
                '-t ballerina-mysql'
        def healthCheck = 1
        def counter = 0
        doLast {
            checkExecResult(execResult, 'Error', standardOutput)
            while (healthCheck != 0 && counter < 12) {
                sleep(5 * 1000)
                healthCheck = checkTestDockerContainerStatus('ballerina-mysql-ssl')
                counter = counter + 1
            }
            if (healthCheck != 0) {
                throw new GradleException("Docker container 'ballerina-mysql-ssl' health test exceeded timeout!")
            }
        }
    }
}

task stopTestDockerContainer() {
    doLast {
        if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
            try {
                def stdOut = new ByteArrayOutputStream()
                exec {
                    commandLine 'sh', '-c', 'docker stop ballerina-mysql'
                    standardOutput = stdOut
                }
            } catch (all) {
                println('Gradle process can safely ignore stopTestDockerContainer task')
            }
        }
    }
}

task stopTestSslDockerContainer() {
    doLast {
        if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
            try {
                def stdOut = new ByteArrayOutputStream()
                exec {
                    commandLine 'sh', '-c', 'docker stop ballerina-mysql-ssl'
                    standardOutput = stdOut
                }
            } catch (all) {
                println('Gradle process can safely ignore stopTestSslDockerContainer task')
            }
        }
    }
}

updateTomlFiles.dependsOn copyStdlibs
startTestDockerContainer.dependsOn createTestDockerImage
startTestSslDockerContainer.dependsOn createTestDockerImage

build.dependsOn "generatePomFileForMavenPublication"
build.dependsOn ":${packageName}-native:build"
test.dependsOn ":${packageName}-native:build"
build.finalizedBy stopTestDockerContainer
build.finalizedBy stopTestSslDockerContainer
test.dependsOn startTestDockerContainer
test.dependsOn startTestSslDockerContainer

publishToMavenLocal.dependsOn build
publish.dependsOn build
