/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import org.apache.tools.ant.taskdefs.condition.Os

description = 'Ballerina - MySQL Ballerina Generator'

def packageName = "mysql"
def packageOrg = "ballerinax"
def platform = "java11"
def snapshotVersion = "-SNAPSHOT"
def tomlVersion = project.version.replace("${snapshotVersion}", "")
def ballerinaConfigFile = new File("$project.projectDir/Ballerina.toml")
def ballerinaDependencyFile = new File("$project.projectDir/Dependencies.toml")
def artifactBallerinaDocs = file("$project.projectDir/build/docs_parent/")
def artifactCacheParent = file("$project.projectDir/build/cache_parent/")
def artifactLibParent = file("$project.projectDir/build/lib_parent/")
def artifactCodeCoverageReport = file("$project.projectDir/target/cache/tests_cache/coverage/ballerina.exec")
def ballerinaCentralAccessToken = System.getenv('BALLERINA_CENTRAL_ACCESS_TOKEN')
def distributionPath = project.projectDir.absolutePath + "/build/target/jballerina-tools-${ballerinaLangVersion}"
if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    distributionPath = distributionPath.replaceAll("\\\\", "/")
}
def distributionBinPath = distributionPath + "/bin"
def originalConfig = ballerinaConfigFile.text
def originalDependencies = ballerinaDependencyFile.text
def testCoverageParam = "--code-coverage --includes=org.ballerinalang.mysql.*:ballerinax.*"

configurations {
    jbalTools
}

dependencies {
    jbalTools("org.ballerinalang:jballerina-tools:${ballerinaLangVersion}") {
        transitive = false
    }
    compile project(":${packageName}-native")
 }

clean {
    delete "$project.projectDir/target"
}

jar {
    manifest {
        attributes('Implementation-Title': project.name, 'Implementation-Version': project.version)
    }
}

task copyToLib(type: Copy) {
    into "$project.projectDir/lib"
    from configurations.externalJars
}

task unpackJballerinaTools(type: Copy) {
    configurations.jbalTools.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        from zipTree(artifact.getFile())
        into new File("${buildDir}/target")
    }
}

task unpackStdLibs() {
    doLast {
        configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File("${buildDir}/target", artifact.name + "-zip")
            }
        }
    }
}

task copyStdlibs(type: Copy) {
    into distributionPath
    /* Standard Libraries */
    configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        def artifactExtractedPath = "${buildDir}/target/" + artifact.name + "-zip"
        into("repo/bala") {
            from "${artifactExtractedPath}/bala/"
        }
        into("repo/cache") {
            from "${artifactExtractedPath}/cache"
        }
    }
}

task updateTomlFile {
    doLast {
        def stdlibDependentSqlVersion = project.stdlibSqlVersion.replace("${snapshotVersion}", "")
        def stdlibCryptoVersion = project.stdlibCryptoVersion.replace("${snapshotVersion}", "")

        def newConfig = ballerinaConfigFile.text.replace("@project.version@", project.version.toString())
        newConfig = newConfig.replace("@toml.version@", tomlVersion)
        newConfig = newConfig.replace("@project.path@", distributionPath)
        newConfig = newConfig.replace("@stdlib.sql.native.version@", project.stdlibSqlVersion.toString())
        newConfig = newConfig.replace("@stdlib.sql.version@", stdlibDependentSqlVersion)
        
        ballerinaConfigFile.text = newConfig

        def newDependencyConfig = ballerinaDependencyFile.text.replace("@stdlib.sql.version@", stdlibDependentSqlVersion)
        newDependencyConfig = newDependencyConfig.replace("@stdlib.crypto.version@", stdlibCryptoVersion)
        ballerinaDependencyFile.text = newDependencyConfig
    }
}

task revertTomlFile {
    doLast {
        ballerinaConfigFile.text = originalConfig
        ballerinaDependencyFile.text = originalDependencies
    }
}

def groupParams = ""
def disableGroups = ""
def debugParams = ""
def balJavaDebugParam = ""
def testParams = ""

task initializeVariables {
    if (project.hasProperty("groups")) {
        groupParams = "--groups ${project.findProperty("groups")}"
    }
    if (project.hasProperty("disable-groups")) {
        disableGroups = "--disable-groups ${project.findProperty("disable-groups")}"
    }
    if (project.hasProperty("debug")) {
        debugParams = "--debug ${project.findProperty("debug")}"
    }
    if (project.hasProperty("balJavaDebug")) {
        balJavaDebugParam = "BAL_JAVA_DEBUG=${project.findProperty("balJavaDebug")}"
    }

    gradle.taskGraph.whenReady { graph ->
        if (graph.hasTask(":${packageName}-ballerina:build") ||
                graph.hasTask(":${packageName}-ballerina:publish") ||
                graph.hasTask(":${packageName}-ballerina:publishToMavenLocal")) {
            ballerinaTest.enabled = false
        } else {
            ballerinaTest.enabled = true
        }

        if (graph.hasTask(":${packageName}-ballerina:test")) {
            testParams = "${testCoverageParam}"
        } else {
            testParams = "--skip-tests"
        }

        if (graph.hasTask(":${packageName}-ballerina:publish")) {
            ballerinaPublish.enabled = true
        } else {
            ballerinaPublish.enabled = false
        }
    }
}

task ballerinaTest {
    doLast {
        exec {
            workingDir project.projectDir
            environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
            environment "STDLIB_VERSION", tomlVersion
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "$balJavaDebugParam $distributionBinPath/bal.bat test ${testCoverageParam} ${groupParams} ${disableGroups} ${debugParams} && exit %%ERRORLEVEL%%"
            } else {
                commandLine 'sh', '-c', "$balJavaDebugParam $distributionBinPath/bal test ${testCoverageParam} ${groupParams} ${disableGroups} ${debugParams}"
            }
        }
    }
}

task ballerinaBuild {
    inputs.dir file(project.projectDir)

    doLast {
        // Build and populate caches
        exec {
            workingDir project.projectDir
            environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
            environment "STDLIB_VERSION", tomlVersion
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "$balJavaDebugParam $distributionBinPath/bal.bat build ${testParams} ${debugParams} && exit %%ERRORLEVEL%%"
            } else {
                commandLine 'sh', '-c', "$balJavaDebugParam $distributionBinPath/bal build ${testParams} ${debugParams}"
            }
        }
        // extract bala file to artifact cache directory
        file("$project.projectDir/target/bala").eachFileMatch(~/.*.bala/) { balaFile ->
            copy {
                from zipTree(balaFile)
                into file("$artifactCacheParent/bala/${packageOrg}/${packageName}/${tomlVersion}/${platform}")
            }
        }
        copy {
            from file("$project.projectDir/target/cache")
            exclude '**/*-testable.jar'
            exclude '**/tests_cache/'
            into file("$artifactCacheParent/cache/")
        }

        // Doc creation and packing
        exec {
            workingDir project.projectDir
            environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "$distributionBinPath/bal.bat doc && exit %%ERRORLEVEL%%"
            } else {
                commandLine 'sh', '-c', "$distributionBinPath/bal doc"
            }
        }
        copy {
            from file("$project.projectDir/target/apidocs/${packageName}")
            into file("$project.projectDir/build/docs_parent/docs/${packageName}")
        }
    }

    outputs.dir artifactCacheParent
    outputs.dir artifactBallerinaDocs
    outputs.dir artifactLibParent
}

task ballerinaPublish {
    doLast {
        // Publish to central
        if (project.version.endsWith('-SNAPSHOT')) {
            return
        }
        if (ballerinaCentralAccessToken != null) {
            println("Publishing to the ballerina central..")
            exec {
                workingDir project.projectDir
                environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
                if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                    commandLine 'cmd', '/c', "$distributionBinPath/bal.bat push && exit %%ERRORLEVEL%%"
                } else {
                    commandLine 'sh', '-c', "$distributionBinPath/bal push"
                }
            }
        } else {
            throw new InvalidUserDataException("Central Access Token is Not Present")
        }
    }
}

task createArtifactZip(type: Zip) {
    destinationDirectory = file("$buildDir/distributions")
    from ballerinaBuild
}

def getCheckedOutGitCommitHash() {
    'git rev-parse --verify --short HEAD'.execute().text.trim()
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact source: createArtifactZip, extension: 'zip'
            artifact source: artifactCodeCoverageReport, classifier: 'jacoco'
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/ballerina-platform/module-${packageOrg}-${packageName}")
            credentials {
                username = System.getenv("packageUser")
                password = System.getenv("packagePAT")
            }
        }
    }
}

def checkExecResult(execResult, failText, standardOutput){
    if (execResult) {
        if (execResult.getExitValue() != 0) {
            throw new GradleException('Non-zero exit value: ' + execResult.getExitValue())
        }
        if (standardOutput.toString().contains(failText)){
            throw new GradleException('"' + failText + '" string in output: ' + standardOutput.toString())
        }
    } else {
        throw new GradleException('Returned a null execResult object')
    }
}

task createTestDockerImage(type: Exec) {
    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
        def standardOutput = new ByteArrayOutputStream()
        commandLine 'sh', '-c', "docker build -f $project.projectDir/tests/resources/Dockerfile -t ballerina-mysql" +
                " -q $project.projectDir/tests/resources/"
        doLast {
            checkExecResult(execResult, 'Error', standardOutput)
            sleep(10 * 1000)
        }
    }
}

def checkTestDockerContainerStatus() {
    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
        try {
            return exec {
                commandLine 'sh', '-c',
                        "docker exec ballerina-mysql mysqladmin ping -hlocalhost -uroot -pTest123# --silent"
            }.exitValue
        } catch (all) {
            return 1;
        }
    }
}

task startTestDockerContainer(type: Exec) {
    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
        def standardOutput = new ByteArrayOutputStream()
        commandLine 'sh', '-c', "docker run --rm -d --name ballerina-mysql -p 3305:3306 -t ballerina-mysql"
        def healthCheck = 1;
        def counter = 0;
        doLast {
            checkExecResult(execResult, 'Error', standardOutput)
            while (healthCheck != 0 && counter < 12) {
                sleep(5 * 1000)
                healthCheck = checkTestDockerContainerStatus()
                counter = counter + 1;
            }
            if (healthCheck != 0) {
                throw new GradleException("Docker container 'ballerina-mysql' health test exceeded timeout!")
            }
        }
    }
}

task stopTestDockerContainer() {
    doLast {
        if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
            try {
                def stdOut = new ByteArrayOutputStream()
                exec {
                    commandLine 'sh', '-c', "docker stop ballerina-mysql"
                    standardOutput = stdOut
                }
            } catch (all) {
                println("Process can safely ignore stopTestDockerContainer task")
            }
        }
    }
}

unpackJballerinaTools.dependsOn copyToLib
unpackStdLibs.dependsOn unpackJballerinaTools
copyStdlibs.dependsOn unpackStdLibs
updateTomlFile.dependsOn copyStdlibs
startTestDockerContainer.dependsOn createTestDockerImage

ballerinaTest.dependsOn updateTomlFile
ballerinaTest.dependsOn initializeVariables
ballerinaTest.dependsOn ":${packageName}-native:build"
ballerinaTest.dependsOn startTestDockerContainer
ballerinaTest.finalizedBy revertTomlFile
ballerinaTest.finalizedBy stopTestDockerContainer
test.dependsOn ballerinaTest

ballerinaBuild.dependsOn test
ballerinaBuild.dependsOn updateTomlFile
ballerinaBuild.dependsOn initializeVariables
ballerinaBuild.dependsOn ":${packageName}-native:build"
ballerinaBuild.finalizedBy revertTomlFile
ballerinaBuild.finalizedBy stopTestDockerContainer
build.dependsOn ballerinaBuild

ballerinaPublish.finalizedBy revertTomlFile
ballerinaPublish.dependsOn initializeVariables
ballerinaPublish.dependsOn updateTomlFile
ballerinaPublish.dependsOn ":${packageName}-native:build"
ballerinaPublish.dependsOn ballerinaBuild
publish.dependsOn ballerinaPublish
